// soc_system_alt_vip_cl_dil_0.v

// This file was auto-generated from alt_vip_cl_dil_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_alt_vip_cl_dil_0 #(
		parameter MAX_WIDTH                        = 720,
		parameter MAX_HEIGHT                       = 576,
		parameter USER_PACKET_SUPPORT              = "PASSTHROUGH",
		parameter USER_PACKET_FIFO_DEPTH           = 0,
		parameter PIXELS_IN_PARALLEL               = 1,
		parameter BITS_PER_SYMBOL                  = 8,
		parameter NUMBER_OF_COLOR_PLANES           = 2,
		parameter COLOR_PLANES_ARE_IN_PARALLEL     = 1,
		parameter SWAP_F0_F1                       = 0,
		parameter DEINTERLACE_ALGORITHM            = "BOB",
		parameter MOTION_BLEED                     = 1,
		parameter RUNTIME_CONTROL                  = 0,
		parameter MOTION_BPS                       = 7,
		parameter IS_422                           = 1,
		parameter CADENCE_DETECTION                = 0,
		parameter CADENCE_ALGORITHM_NAME           = "CADENCE_32_22_VOF",
		parameter CLOCKS_ARE_SEPARATE              = 0,
		parameter MEM_PORT_WIDTH                   = 256,
		parameter WRITE_MASTER_FIFO_DEPTH          = 64,
		parameter WRITE_MASTER_BURST_TARGET        = 32,
		parameter EDI_READ_MASTER_FIFO_DEPTH       = 64,
		parameter EDI_READ_MASTER_BURST_TARGET     = 32,
		parameter MA_READ_MASTER_FIFO_DEPTH        = 64,
		parameter MA_READ_MASTER_BURST_TARGET      = 32,
		parameter MOTION_WRITE_MASTER_FIFO_DEPTH   = 64,
		parameter MOTION_WRITE_MASTER_BURST_TARGET = 32,
		parameter MOTION_READ_MASTER_FIFO_DEPTH    = 64,
		parameter MOTION_READ_MASTER_BURST_TARGET  = 32,
		parameter MEM_BASE_ADDR                    = 0
	) (
		input  wire        av_st_clock,        // av_st_clock.clk
		input  wire        av_st_reset,        // av_st_reset.reset
		input  wire [15:0] din_data,           //         din.data
		input  wire        din_valid,          //            .valid
		input  wire        din_startofpacket,  //            .startofpacket
		input  wire        din_endofpacket,    //            .endofpacket
		output wire        din_ready,          //            .ready
		output wire [15:0] dout_data,          //        dout.data
		output wire        dout_valid,         //            .valid
		output wire        dout_startofpacket, //            .startofpacket
		output wire        dout_endofpacket,   //            .endofpacket
		input  wire        dout_ready          //            .ready
	);

	wire          video_in_av_st_dout_valid;                              // video_in:av_st_dout_valid -> video_in_duplicator:av_st_din_valid
	wire   [47:0] video_in_av_st_dout_data;                               // video_in:av_st_dout_data -> video_in_duplicator:av_st_din_data
	wire          video_in_av_st_dout_ready;                              // video_in_duplicator:av_st_din_ready -> video_in:av_st_dout_ready
	wire          video_in_av_st_dout_startofpacket;                      // video_in:av_st_dout_startofpacket -> video_in_duplicator:av_st_din_startofpacket
	wire          video_in_av_st_dout_endofpacket;                        // video_in:av_st_dout_endofpacket -> video_in_duplicator:av_st_din_endofpacket
	wire          video_in_duplicator_av_st_dout_0_valid;                 // video_in_duplicator:av_st_dout_valid_0 -> video_in_op0_pipNto1:av_st_din_valid
	wire   [47:0] video_in_duplicator_av_st_dout_0_data;                  // video_in_duplicator:av_st_dout_data_0 -> video_in_op0_pipNto1:av_st_din_data
	wire          video_in_duplicator_av_st_dout_0_ready;                 // video_in_op0_pipNto1:av_st_din_ready -> video_in_duplicator:av_st_dout_ready_0
	wire          video_in_duplicator_av_st_dout_0_startofpacket;         // video_in_duplicator:av_st_dout_startofpacket_0 -> video_in_op0_pipNto1:av_st_din_startofpacket
	wire          video_in_duplicator_av_st_dout_0_endofpacket;           // video_in_duplicator:av_st_dout_endofpacket_0 -> video_in_op0_pipNto1:av_st_din_endofpacket
	wire          video_in_duplicator_av_st_dout_1_valid;                 // video_in_duplicator:av_st_dout_valid_1 -> output_mux:av_st_din_valid_0
	wire   [47:0] video_in_duplicator_av_st_dout_1_data;                  // video_in_duplicator:av_st_dout_data_1 -> output_mux:av_st_din_data_0
	wire          video_in_duplicator_av_st_dout_1_ready;                 // output_mux:av_st_din_ready_0 -> video_in_duplicator:av_st_dout_ready_1
	wire          video_in_duplicator_av_st_dout_1_startofpacket;         // video_in_duplicator:av_st_dout_startofpacket_1 -> output_mux:av_st_din_startofpacket_0
	wire          video_in_duplicator_av_st_dout_1_endofpacket;           // video_in_duplicator:av_st_dout_endofpacket_1 -> output_mux:av_st_din_endofpacket_0
	wire          video_in_op0_pipnto1_av_st_dout_valid;                  // video_in_op0_pipNto1:av_st_dout_valid -> edi_line_buffer:av_st_din_valid
	wire   [47:0] video_in_op0_pipnto1_av_st_dout_data;                   // video_in_op0_pipNto1:av_st_dout_data -> edi_line_buffer:av_st_din_data
	wire          video_in_op0_pipnto1_av_st_dout_ready;                  // edi_line_buffer:av_st_din_ready -> video_in_op0_pipNto1:av_st_dout_ready
	wire          video_in_op0_pipnto1_av_st_dout_startofpacket;          // video_in_op0_pipNto1:av_st_dout_startofpacket -> edi_line_buffer:av_st_din_startofpacket
	wire          video_in_op0_pipnto1_av_st_dout_endofpacket;            // video_in_op0_pipNto1:av_st_dout_endofpacket -> edi_line_buffer:av_st_din_endofpacket
	wire          edi_line_buffer_av_st_dout_0_valid;                     // edi_line_buffer:av_st_dout_valid_0 -> dil_algo:din_bob_valid
	wire   [63:0] edi_line_buffer_av_st_dout_0_data;                      // edi_line_buffer:av_st_dout_data_0 -> dil_algo:din_bob_data
	wire          edi_line_buffer_av_st_dout_0_ready;                     // dil_algo:din_bob_ready -> edi_line_buffer:av_st_dout_ready_0
	wire          edi_line_buffer_av_st_dout_0_startofpacket;             // edi_line_buffer:av_st_dout_startofpacket_0 -> dil_algo:din_bob_startofpacket
	wire          edi_line_buffer_av_st_dout_0_endofpacket;               // edi_line_buffer:av_st_dout_endofpacket_0 -> dil_algo:din_bob_endofpacket
	wire          edi_line_buffer_av_st_dout_1_valid;                     // edi_line_buffer:av_st_dout_valid_1 -> edi_line_buffer_pip_convertor:av_st_din_valid
	wire   [47:0] edi_line_buffer_av_st_dout_1_data;                      // edi_line_buffer:av_st_dout_data_1 -> edi_line_buffer_pip_convertor:av_st_din_data
	wire          edi_line_buffer_av_st_dout_1_ready;                     // edi_line_buffer_pip_convertor:av_st_din_ready -> edi_line_buffer:av_st_dout_ready_1
	wire          edi_line_buffer_av_st_dout_1_startofpacket;             // edi_line_buffer:av_st_dout_startofpacket_1 -> edi_line_buffer_pip_convertor:av_st_din_startofpacket
	wire          edi_line_buffer_av_st_dout_1_endofpacket;               // edi_line_buffer:av_st_dout_endofpacket_1 -> edi_line_buffer_pip_convertor:av_st_din_endofpacket
	wire          edi_line_buffer_pip_convertor_av_st_dout_valid;         // edi_line_buffer_pip_convertor:av_st_dout_valid -> output_mux:av_st_din_valid_1
	wire   [47:0] edi_line_buffer_pip_convertor_av_st_dout_data;          // edi_line_buffer_pip_convertor:av_st_dout_data -> output_mux:av_st_din_data_1
	wire          edi_line_buffer_pip_convertor_av_st_dout_ready;         // output_mux:av_st_din_ready_1 -> edi_line_buffer_pip_convertor:av_st_dout_ready
	wire          edi_line_buffer_pip_convertor_av_st_dout_startofpacket; // edi_line_buffer_pip_convertor:av_st_dout_startofpacket -> output_mux:av_st_din_startofpacket_1
	wire          edi_line_buffer_pip_convertor_av_st_dout_endofpacket;   // edi_line_buffer_pip_convertor:av_st_dout_endofpacket -> output_mux:av_st_din_endofpacket_1
	wire          dil_algo_dout_valid;                                    // dil_algo:dout_valid -> dil_algo_pip_convertor:av_st_din_valid
	wire   [47:0] dil_algo_dout_data;                                     // dil_algo:dout_data -> dil_algo_pip_convertor:av_st_din_data
	wire          dil_algo_dout_ready;                                    // dil_algo_pip_convertor:av_st_din_ready -> dil_algo:dout_ready
	wire          dil_algo_dout_startofpacket;                            // dil_algo:dout_startofpacket -> dil_algo_pip_convertor:av_st_din_startofpacket
	wire          dil_algo_dout_endofpacket;                              // dil_algo:dout_endofpacket -> dil_algo_pip_convertor:av_st_din_endofpacket
	wire          dil_algo_pip_convertor_av_st_dout_valid;                // dil_algo_pip_convertor:av_st_dout_valid -> output_mux:av_st_din_valid_2
	wire   [47:0] dil_algo_pip_convertor_av_st_dout_data;                 // dil_algo_pip_convertor:av_st_dout_data -> output_mux:av_st_din_data_2
	wire          dil_algo_pip_convertor_av_st_dout_ready;                // output_mux:av_st_din_ready_2 -> dil_algo_pip_convertor:av_st_dout_ready
	wire          dil_algo_pip_convertor_av_st_dout_startofpacket;        // dil_algo_pip_convertor:av_st_dout_startofpacket -> output_mux:av_st_din_startofpacket_2
	wire          dil_algo_pip_convertor_av_st_dout_endofpacket;          // dil_algo_pip_convertor:av_st_dout_endofpacket -> output_mux:av_st_din_endofpacket_2
	wire          output_mux_av_st_dout_valid;                            // output_mux:av_st_dout_valid -> video_out:av_st_din_valid
	wire   [47:0] output_mux_av_st_dout_data;                             // output_mux:av_st_dout_data -> video_out:av_st_din_data
	wire          output_mux_av_st_dout_ready;                            // video_out:av_st_din_ready -> output_mux:av_st_dout_ready
	wire          output_mux_av_st_dout_startofpacket;                    // output_mux:av_st_dout_startofpacket -> video_out:av_st_din_startofpacket
	wire          output_mux_av_st_dout_endofpacket;                      // output_mux:av_st_dout_endofpacket -> video_out:av_st_din_endofpacket
	wire          scheduler_cmd0_valid;                                   // scheduler:cmd0_valid -> video_in:av_st_cmd_valid
	wire   [63:0] scheduler_cmd0_data;                                    // scheduler:cmd0_data -> video_in:av_st_cmd_data
	wire          scheduler_cmd0_ready;                                   // video_in:av_st_cmd_ready -> scheduler:cmd0_ready
	wire          scheduler_cmd0_startofpacket;                           // scheduler:cmd0_startofpacket -> video_in:av_st_cmd_startofpacket
	wire          scheduler_cmd0_endofpacket;                             // scheduler:cmd0_endofpacket -> video_in:av_st_cmd_endofpacket
	wire          scheduler_cmd1_valid;                                   // scheduler:cmd1_valid -> video_out:av_st_cmd_valid
	wire   [63:0] scheduler_cmd1_data;                                    // scheduler:cmd1_data -> video_out:av_st_cmd_data
	wire          scheduler_cmd1_ready;                                   // video_out:av_st_cmd_ready -> scheduler:cmd1_ready
	wire          scheduler_cmd1_startofpacket;                           // scheduler:cmd1_startofpacket -> video_out:av_st_cmd_startofpacket
	wire          scheduler_cmd1_endofpacket;                             // scheduler:cmd1_endofpacket -> video_out:av_st_cmd_endofpacket
	wire          scheduler_cmd2_valid;                                   // scheduler:cmd2_valid -> edi_line_buffer:av_st_cmd_valid
	wire   [63:0] scheduler_cmd2_data;                                    // scheduler:cmd2_data -> edi_line_buffer:av_st_cmd_data
	wire          scheduler_cmd2_ready;                                   // edi_line_buffer:av_st_cmd_ready -> scheduler:cmd2_ready
	wire          scheduler_cmd2_startofpacket;                           // scheduler:cmd2_startofpacket -> edi_line_buffer:av_st_cmd_startofpacket
	wire          scheduler_cmd2_endofpacket;                             // scheduler:cmd2_endofpacket -> edi_line_buffer:av_st_cmd_endofpacket
	wire          scheduler_cmd3_valid;                                   // scheduler:cmd3_valid -> dil_algo:cmd_valid
	wire   [63:0] scheduler_cmd3_data;                                    // scheduler:cmd3_data -> dil_algo:cmd_data
	wire          scheduler_cmd3_ready;                                   // dil_algo:cmd_ready -> scheduler:cmd3_ready
	wire          scheduler_cmd3_startofpacket;                           // scheduler:cmd3_startofpacket -> dil_algo:cmd_startofpacket
	wire          scheduler_cmd3_endofpacket;                             // scheduler:cmd3_endofpacket -> dil_algo:cmd_endofpacket
	wire          scheduler_cmd4_valid;                                   // scheduler:cmd4_valid -> output_mux:av_st_cmd_valid
	wire   [63:0] scheduler_cmd4_data;                                    // scheduler:cmd4_data -> output_mux:av_st_cmd_data
	wire          scheduler_cmd4_ready;                                   // output_mux:av_st_cmd_ready -> scheduler:cmd4_ready
	wire          scheduler_cmd4_startofpacket;                           // scheduler:cmd4_startofpacket -> output_mux:av_st_cmd_startofpacket
	wire          scheduler_cmd4_endofpacket;                             // scheduler:cmd4_endofpacket -> output_mux:av_st_cmd_endofpacket
	wire          video_in_av_st_resp_valid;                              // video_in:av_st_resp_valid -> scheduler:resp0_valid
	wire   [63:0] video_in_av_st_resp_data;                               // video_in:av_st_resp_data -> scheduler:resp0_data
	wire          video_in_av_st_resp_ready;                              // scheduler:resp0_ready -> video_in:av_st_resp_ready
	wire          video_in_av_st_resp_startofpacket;                      // video_in:av_st_resp_startofpacket -> scheduler:resp0_startofpacket
	wire          video_in_av_st_resp_endofpacket;                        // video_in:av_st_resp_endofpacket -> scheduler:resp0_endofpacket
	wire  [111:0] edi_line_buffer_av_st_dout_data;                        // port fragment
	wire    [1:0] edi_line_buffer_av_st_dout_valid;                       // port fragment
	wire    [1:0] edi_line_buffer_av_st_dout_startofpacket;               // port fragment
	wire    [1:0] edi_line_buffer_av_st_dout_endofpacket;                 // port fragment
	wire   [95:0] video_in_duplicator_av_st_dout_data;                    // port fragment
	wire    [1:0] video_in_duplicator_av_st_dout_valid;                   // port fragment
	wire    [1:0] video_in_duplicator_av_st_dout_startofpacket;           // port fragment
	wire    [1:0] video_in_duplicator_av_st_dout_endofpacket;             // port fragment
	wire    [2:0] output_mux_av_st_din_ready;                             // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (MAX_WIDTH != 720)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_width_check ( .error(1'b1) );
		end
		if (MAX_HEIGHT != 576)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_height_check ( .error(1'b1) );
		end
		if (USER_PACKET_SUPPORT != "PASSTHROUGH")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_support_check ( .error(1'b1) );
		end
		if (USER_PACKET_FIFO_DEPTH != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_fifo_depth_check ( .error(1'b1) );
		end
		if (PIXELS_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					pixels_in_parallel_check ( .error(1'b1) );
		end
		if (BITS_PER_SYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bits_per_symbol_check ( .error(1'b1) );
		end
		if (NUMBER_OF_COLOR_PLANES != 2)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					number_of_color_planes_check ( .error(1'b1) );
		end
		if (COLOR_PLANES_ARE_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					color_planes_are_in_parallel_check ( .error(1'b1) );
		end
		if (SWAP_F0_F1 != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					swap_f0_f1_check ( .error(1'b1) );
		end
		if (DEINTERLACE_ALGORITHM != "BOB")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					deinterlace_algorithm_check ( .error(1'b1) );
		end
		if (MOTION_BLEED != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					motion_bleed_check ( .error(1'b1) );
		end
		if (RUNTIME_CONTROL != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					runtime_control_check ( .error(1'b1) );
		end
		if (MOTION_BPS != 7)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					motion_bps_check ( .error(1'b1) );
		end
		if (IS_422 != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_422_check ( .error(1'b1) );
		end
		if (CADENCE_DETECTION != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cadence_detection_check ( .error(1'b1) );
		end
		if (CADENCE_ALGORITHM_NAME != "CADENCE_32_22_VOF")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cadence_algorithm_name_check ( .error(1'b1) );
		end
		if (CLOCKS_ARE_SEPARATE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					clocks_are_separate_check ( .error(1'b1) );
		end
		if (MEM_PORT_WIDTH != 256)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					mem_port_width_check ( .error(1'b1) );
		end
		if (WRITE_MASTER_FIFO_DEPTH != 64)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					write_master_fifo_depth_check ( .error(1'b1) );
		end
		if (WRITE_MASTER_BURST_TARGET != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					write_master_burst_target_check ( .error(1'b1) );
		end
		if (EDI_READ_MASTER_FIFO_DEPTH != 64)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					edi_read_master_fifo_depth_check ( .error(1'b1) );
		end
		if (EDI_READ_MASTER_BURST_TARGET != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					edi_read_master_burst_target_check ( .error(1'b1) );
		end
		if (MA_READ_MASTER_FIFO_DEPTH != 64)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					ma_read_master_fifo_depth_check ( .error(1'b1) );
		end
		if (MA_READ_MASTER_BURST_TARGET != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					ma_read_master_burst_target_check ( .error(1'b1) );
		end
		if (MOTION_WRITE_MASTER_FIFO_DEPTH != 64)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					motion_write_master_fifo_depth_check ( .error(1'b1) );
		end
		if (MOTION_WRITE_MASTER_BURST_TARGET != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					motion_write_master_burst_target_check ( .error(1'b1) );
		end
		if (MOTION_READ_MASTER_FIFO_DEPTH != 64)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					motion_read_master_fifo_depth_check ( .error(1'b1) );
		end
		if (MOTION_READ_MASTER_BURST_TARGET != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					motion_read_master_burst_target_check ( .error(1'b1) );
		end
		if (MEM_BASE_ADDR != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					mem_base_addr_check ( .error(1'b1) );
		end
	endgenerate

	soc_system_alt_vip_cl_dil_0_video_in video_in (
		.main_clock_clk              (av_st_clock),                       //    main_clock.clk
		.main_reset_reset            (av_st_reset),                       //    main_reset.reset
		.av_st_vid_din_data          (din_data),                          // av_st_vid_din.data
		.av_st_vid_din_valid         (din_valid),                         //              .valid
		.av_st_vid_din_startofpacket (din_startofpacket),                 //              .startofpacket
		.av_st_vid_din_endofpacket   (din_endofpacket),                   //              .endofpacket
		.av_st_vid_din_ready         (din_ready),                         //              .ready
		.av_st_cmd_valid             (scheduler_cmd0_valid),              //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd0_startofpacket),      //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd0_endofpacket),        //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd0_data),               //              .data
		.av_st_cmd_ready             (scheduler_cmd0_ready),              //              .ready
		.av_st_resp_valid            (video_in_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (video_in_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (video_in_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (video_in_av_st_resp_data),          //              .data
		.av_st_resp_ready            (video_in_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (video_in_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (video_in_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (video_in_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (video_in_av_st_dout_data),          //              .data
		.av_st_dout_ready            (video_in_av_st_dout_ready)          //              .ready
	);

	alt_vip_dil_algorithm #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (2),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.IS_422                       (1),
		.SOURCE_ADDRESS               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) dil_algo (
		.clock                    (av_st_clock),                                // main_clock.clk
		.reset                    (av_st_reset),                                // main_reset.reset
		.cmd_valid                (scheduler_cmd3_valid),                       //        cmd.valid
		.cmd_startofpacket        (scheduler_cmd3_startofpacket),               //           .startofpacket
		.cmd_endofpacket          (scheduler_cmd3_endofpacket),                 //           .endofpacket
		.cmd_data                 (scheduler_cmd3_data),                        //           .data
		.cmd_ready                (scheduler_cmd3_ready),                       //           .ready
		.din_weave_valid          (),                                           //  din_weave.valid
		.din_weave_startofpacket  (),                                           //           .startofpacket
		.din_weave_endofpacket    (),                                           //           .endofpacket
		.din_weave_data           (),                                           //           .data
		.din_weave_ready          (),                                           //           .ready
		.din_bob_valid            (edi_line_buffer_av_st_dout_0_valid),         //    din_bob.valid
		.din_bob_startofpacket    (edi_line_buffer_av_st_dout_0_startofpacket), //           .startofpacket
		.din_bob_endofpacket      (edi_line_buffer_av_st_dout_0_endofpacket),   //           .endofpacket
		.din_bob_data             (edi_line_buffer_av_st_dout_0_data),          //           .data
		.din_bob_ready            (edi_line_buffer_av_st_dout_0_ready),         //           .ready
		.din_motion_valid         (),                                           // din_motion.valid
		.din_motion_startofpacket (),                                           //           .startofpacket
		.din_motion_endofpacket   (),                                           //           .endofpacket
		.din_motion_data          (),                                           //           .data
		.din_motion_ready         (),                                           //           .ready
		.dout_valid               (dil_algo_dout_valid),                        //       dout.valid
		.dout_startofpacket       (dil_algo_dout_startofpacket),                //           .startofpacket
		.dout_endofpacket         (dil_algo_dout_endofpacket),                  //           .endofpacket
		.dout_data                (dil_algo_dout_data),                         //           .data
		.dout_ready               (dil_algo_dout_ready)                         //           .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (2),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.SOP_PRE_ALIGNED              (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.TYPE_11_SUPPORT              (0),
		.NO_CONCATENATION             (0),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) video_out (
		.clock                        (av_st_clock),                         //     main_clock.clk
		.reset                        (av_st_reset),                         //     main_reset.reset
		.av_st_cmd_valid              (scheduler_cmd1_valid),                //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (scheduler_cmd1_startofpacket),        //               .startofpacket
		.av_st_cmd_endofpacket        (scheduler_cmd1_endofpacket),          //               .endofpacket
		.av_st_cmd_data               (scheduler_cmd1_data),                 //               .data
		.av_st_cmd_ready              (scheduler_cmd1_ready),                //               .ready
		.av_st_din_valid              (output_mux_av_st_dout_valid),         //      av_st_din.valid
		.av_st_din_startofpacket      (output_mux_av_st_dout_startofpacket), //               .startofpacket
		.av_st_din_endofpacket        (output_mux_av_st_dout_endofpacket),   //               .endofpacket
		.av_st_din_data               (output_mux_av_st_dout_data),          //               .data
		.av_st_din_ready              (output_mux_av_st_dout_ready),         //               .ready
		.av_st_vid_dout_data          (dout_data),                           // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_valid),                          //               .valid
		.av_st_vid_dout_startofpacket (dout_startofpacket),                  //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_endofpacket),                    //               .endofpacket
		.av_st_vid_dout_ready         (dout_ready)                           //               .ready
	);

	alt_vip_dil_bob_scheduler #(
		.MAX_LINE_LENGTH           (4096),
		.MAX_FIELD_HEIGHT          (288),
		.RUNTIME_CONTROL           (0),
		.LIMITED_READBACK          (0),
		.SRC_WIDTH                 (8),
		.DST_WIDTH                 (8),
		.CONTEXT_WIDTH             (8),
		.TASK_WIDTH                (8),
		.FRAME_FOR_FIELD_MODE      (1),
		.FIELD_TYPE_TO_DEINTERLACE (0),
		.SOURCE_ADDRESS            (0)
	) scheduler (
		.clock               (av_st_clock),                       // main_clock.clk
		.reset               (av_st_reset),                       // main_reset.reset
		.cmd0_valid          (scheduler_cmd0_valid),              //       cmd0.valid
		.cmd0_startofpacket  (scheduler_cmd0_startofpacket),      //           .startofpacket
		.cmd0_endofpacket    (scheduler_cmd0_endofpacket),        //           .endofpacket
		.cmd0_data           (scheduler_cmd0_data),               //           .data
		.cmd0_ready          (scheduler_cmd0_ready),              //           .ready
		.cmd1_valid          (scheduler_cmd1_valid),              //       cmd1.valid
		.cmd1_startofpacket  (scheduler_cmd1_startofpacket),      //           .startofpacket
		.cmd1_endofpacket    (scheduler_cmd1_endofpacket),        //           .endofpacket
		.cmd1_data           (scheduler_cmd1_data),               //           .data
		.cmd1_ready          (scheduler_cmd1_ready),              //           .ready
		.cmd2_valid          (scheduler_cmd2_valid),              //       cmd2.valid
		.cmd2_startofpacket  (scheduler_cmd2_startofpacket),      //           .startofpacket
		.cmd2_endofpacket    (scheduler_cmd2_endofpacket),        //           .endofpacket
		.cmd2_data           (scheduler_cmd2_data),               //           .data
		.cmd2_ready          (scheduler_cmd2_ready),              //           .ready
		.cmd3_valid          (scheduler_cmd3_valid),              //       cmd3.valid
		.cmd3_startofpacket  (scheduler_cmd3_startofpacket),      //           .startofpacket
		.cmd3_endofpacket    (scheduler_cmd3_endofpacket),        //           .endofpacket
		.cmd3_data           (scheduler_cmd3_data),               //           .data
		.cmd3_ready          (scheduler_cmd3_ready),              //           .ready
		.cmd4_valid          (scheduler_cmd4_valid),              //       cmd4.valid
		.cmd4_startofpacket  (scheduler_cmd4_startofpacket),      //           .startofpacket
		.cmd4_endofpacket    (scheduler_cmd4_endofpacket),        //           .endofpacket
		.cmd4_data           (scheduler_cmd4_data),               //           .data
		.cmd4_ready          (scheduler_cmd4_ready),              //           .ready
		.resp0_valid         (video_in_av_st_resp_valid),         //      resp0.valid
		.resp0_startofpacket (video_in_av_st_resp_startofpacket), //           .startofpacket
		.resp0_endofpacket   (video_in_av_st_resp_endofpacket),   //           .endofpacket
		.resp0_data          (video_in_av_st_resp_data),          //           .data
		.resp0_ready         (video_in_av_st_resp_ready)          //           .ready
	);

	alt_vip_line_buffer #(
		.PIXEL_WIDTH             (16),
		.SYMBOLS_IN_SEQ          (1),
		.PIXELS_IN_PARALLEL      (1),
		.CONVERT_TO_1_PIP        (0),
		.MAX_LINE_LENGTH         (720),
		.OUTPUT_PORTS            (2),
		.MODE                    ("RATE_MATCHING"),
		.ENABLE_RECEIVE_ONLY_CMD (1),
		.TRACK_LINE_LENGTH       (1),
		.OUTPUT_MUX_SEL          ("VARIABLE"),
		.FIFO_SIZE               (16),
		.KERNEL_SIZE_0           (2),
		.KERNEL_CENTER_0         (1),
		.KERNEL_SIZE_1           (1),
		.KERNEL_START_1          (1),
		.KERNEL_CENTER_1         (1),
		.KERNEL_SIZE_2           (8),
		.KERNEL_START_2          (0),
		.KERNEL_CENTER_2         (3),
		.KERNEL_SIZE_3           (8),
		.KERNEL_START_3          (0),
		.KERNEL_CENTER_3         (3),
		.KERNEL_SIZE_4           (8),
		.KERNEL_START_4          (0),
		.KERNEL_CENTER_4         (3),
		.KERNEL_SIZE_5           (8),
		.KERNEL_START_5          (0),
		.KERNEL_CENTER_5         (3),
		.KERNEL_SIZE_6           (8),
		.KERNEL_START_6          (0),
		.KERNEL_CENTER_6         (3),
		.KERNEL_SIZE_7           (8),
		.KERNEL_START_7          (0),
		.KERNEL_CENTER_7         (3),
		.SRC_WIDTH               (8),
		.DST_WIDTH               (8),
		.CONTEXT_WIDTH           (8),
		.TASK_WIDTH              (8),
		.SOURCE_ADDRESS          (0),
		.ENABLE_FIFOS            (0),
		.ENABLE_PIPELINE_REG     (0),
		.FAMILY                  ("Cyclone V")
	) edi_line_buffer (
		.clock                    (av_st_clock),                                                                               //   main_clock.clk
		.reset                    (av_st_reset),                                                                               //   main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd2_valid),                                                                      //    av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd2_startofpacket),                                                              //             .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd2_endofpacket),                                                                //             .endofpacket
		.av_st_cmd_data           (scheduler_cmd2_data),                                                                       //             .data
		.av_st_cmd_ready          (scheduler_cmd2_ready),                                                                      //             .ready
		.av_st_din_valid          (video_in_op0_pipnto1_av_st_dout_valid),                                                     //    av_st_din.valid
		.av_st_din_startofpacket  (video_in_op0_pipnto1_av_st_dout_startofpacket),                                             //             .startofpacket
		.av_st_din_endofpacket    (video_in_op0_pipnto1_av_st_dout_endofpacket),                                               //             .endofpacket
		.av_st_din_data           (video_in_op0_pipnto1_av_st_dout_data),                                                      //             .data
		.av_st_din_ready          (video_in_op0_pipnto1_av_st_dout_ready),                                                     //             .ready
		.av_st_dout_valid         ({edi_line_buffer_av_st_dout_valid[1],edi_line_buffer_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_ready         ({edi_line_buffer_av_st_dout_1_ready,edi_line_buffer_av_st_dout_0_ready}),                   //             .ready
		.av_st_dout_startofpacket ({edi_line_buffer_av_st_dout_startofpacket[1],edi_line_buffer_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({edi_line_buffer_av_st_dout_endofpacket[1],edi_line_buffer_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({edi_line_buffer_av_st_dout_data[111:64],edi_line_buffer_av_st_dout_data[63:0]})            //             .data
	);

	alt_vip_packet_duplicator #(
		.DUPLICATOR_FANOUT    (2),
		.ALWAYS_DUPLICATE_ALL (0),
		.USE_COMMAND          (0),
		.DST_ID_0             (0),
		.DST_ID_1             (0),
		.DST_ID_2             (0),
		.DST_ID_3             (0),
		.DST_ID_4             (0),
		.DST_ID_5             (0),
		.DST_ID_6             (0),
		.DST_ID_7             (0),
		.DST_ID_8             (0),
		.DST_ID_9             (0),
		.DST_ID_10            (0),
		.DST_ID_11            (0),
		.DST_ID_12            (0),
		.DST_ID_13            (0),
		.DST_ID_14            (0),
		.DST_ID_15            (0),
		.DEPTH                (4),
		.REGISTER_OUTPUT      (1),
		.PIPELINE_READY       (1),
		.NAME                 ("undefined"),
		.SRC_WIDTH            (8),
		.DST_WIDTH            (8),
		.CONTEXT_WIDTH        (8),
		.TASK_WIDTH           (8),
		.DATA_WIDTH_INT       (16),
		.USER_WIDTH_INT       (0)
	) video_in_duplicator (
		.clock                    (av_st_clock),                                                                                       //   main_clock.clk
		.reset                    (av_st_reset),                                                                                       //   main_reset.reset
		.av_st_din_valid          (video_in_av_st_dout_valid),                                                                         //    av_st_din.valid
		.av_st_din_startofpacket  (video_in_av_st_dout_startofpacket),                                                                 //             .startofpacket
		.av_st_din_endofpacket    (video_in_av_st_dout_endofpacket),                                                                   //             .endofpacket
		.av_st_din_data           (video_in_av_st_dout_data),                                                                          //             .data
		.av_st_din_ready          (video_in_av_st_dout_ready),                                                                         //             .ready
		.av_st_dout_valid         ({video_in_duplicator_av_st_dout_valid[1],video_in_duplicator_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({video_in_duplicator_av_st_dout_startofpacket[1],video_in_duplicator_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({video_in_duplicator_av_st_dout_endofpacket[1],video_in_duplicator_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({video_in_duplicator_av_st_dout_data[95:48],video_in_duplicator_av_st_dout_data[47:0]}),            //             .data
		.av_st_dout_ready         ({video_in_duplicator_av_st_dout_1_ready,video_in_duplicator_av_st_dout_0_ready})                    //             .ready
	);

	alt_vip_pip_converter_core #(
		.PIXEL_WIDTH            (16),
		.PIXELS_IN_PARALLEL_IN  (1),
		.PIXELS_IN_PARALLEL_OUT (1),
		.PIPELINE_READY         (1),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8),
		.INPUT_FIFO_DEPTH       (0),
		.OUTPUT_FIFO_DEPTH      (16)
	) video_in_op0_pipnto1 (
		.clock                    (av_st_clock),                                    // main_clock.clk
		.reset                    (av_st_reset),                                    // main_reset.reset
		.av_st_din_valid          (video_in_duplicator_av_st_dout_0_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (video_in_duplicator_av_st_dout_0_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (video_in_duplicator_av_st_dout_0_endofpacket),   //           .endofpacket
		.av_st_din_data           (video_in_duplicator_av_st_dout_0_data),          //           .data
		.av_st_din_ready          (video_in_duplicator_av_st_dout_0_ready),         //           .ready
		.av_st_dout_valid         (video_in_op0_pipnto1_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (video_in_op0_pipnto1_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (video_in_op0_pipnto1_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (video_in_op0_pipnto1_av_st_dout_data),           //           .data
		.av_st_dout_ready         (video_in_op0_pipnto1_av_st_dout_ready)           //           .ready
	);

	alt_vip_pip_converter_core #(
		.PIXEL_WIDTH            (16),
		.PIXELS_IN_PARALLEL_IN  (1),
		.PIXELS_IN_PARALLEL_OUT (1),
		.PIPELINE_READY         (1),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8),
		.INPUT_FIFO_DEPTH       (0),
		.OUTPUT_FIFO_DEPTH      (16)
	) edi_line_buffer_pip_convertor (
		.clock                    (av_st_clock),                                            // main_clock.clk
		.reset                    (av_st_reset),                                            // main_reset.reset
		.av_st_din_valid          (edi_line_buffer_av_st_dout_1_valid),                     //  av_st_din.valid
		.av_st_din_startofpacket  (edi_line_buffer_av_st_dout_1_startofpacket),             //           .startofpacket
		.av_st_din_endofpacket    (edi_line_buffer_av_st_dout_1_endofpacket),               //           .endofpacket
		.av_st_din_data           (edi_line_buffer_av_st_dout_1_data),                      //           .data
		.av_st_din_ready          (edi_line_buffer_av_st_dout_1_ready),                     //           .ready
		.av_st_dout_valid         (edi_line_buffer_pip_convertor_av_st_dout_valid),         // av_st_dout.valid
		.av_st_dout_startofpacket (edi_line_buffer_pip_convertor_av_st_dout_startofpacket), //           .startofpacket
		.av_st_dout_endofpacket   (edi_line_buffer_pip_convertor_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_dout_data          (edi_line_buffer_pip_convertor_av_st_dout_data),          //           .data
		.av_st_dout_ready         (edi_line_buffer_pip_convertor_av_st_dout_ready)          //           .ready
	);

	alt_vip_packet_mux #(
		.NUM_INPUTS      (3),
		.REGISTER_OUTPUT (1),
		.PIPELINE_READY  (1),
		.NAME            ("undefined"),
		.SRC_WIDTH       (8),
		.DST_WIDTH       (8),
		.CONTEXT_WIDTH   (8),
		.TASK_WIDTH      (8),
		.DATA_WIDTH_INT  (16),
		.USER_WIDTH_INT  (0)
	) output_mux (
		.clock                    (av_st_clock),                                                                                                                                             //  main_clock.clk
		.reset                    (av_st_reset),                                                                                                                                             //  main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd4_valid),                                                                                                                                    //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd4_startofpacket),                                                                                                                            //            .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd4_endofpacket),                                                                                                                              //            .endofpacket
		.av_st_cmd_data           (scheduler_cmd4_data),                                                                                                                                     //            .data
		.av_st_cmd_ready          (scheduler_cmd4_ready),                                                                                                                                    //            .ready
		.av_st_din_valid          ({dil_algo_pip_convertor_av_st_dout_valid,edi_line_buffer_pip_convertor_av_st_dout_valid,video_in_duplicator_av_st_dout_1_valid}),                         // av_st_din_0.valid
		.av_st_din_startofpacket  ({dil_algo_pip_convertor_av_st_dout_startofpacket,edi_line_buffer_pip_convertor_av_st_dout_startofpacket,video_in_duplicator_av_st_dout_1_startofpacket}), //            .startofpacket
		.av_st_din_endofpacket    ({dil_algo_pip_convertor_av_st_dout_endofpacket,edi_line_buffer_pip_convertor_av_st_dout_endofpacket,video_in_duplicator_av_st_dout_1_endofpacket}),       //            .endofpacket
		.av_st_din_data           ({dil_algo_pip_convertor_av_st_dout_data[47:0],edi_line_buffer_pip_convertor_av_st_dout_data[47:0],video_in_duplicator_av_st_dout_1_data[47:0]}),          //            .data
		.av_st_din_ready          ({output_mux_av_st_din_ready[2],output_mux_av_st_din_ready[1],output_mux_av_st_din_ready[0]}),                                                             //            .ready
		.av_st_dout_valid         (output_mux_av_st_dout_valid),                                                                                                                             //  av_st_dout.valid
		.av_st_dout_startofpacket (output_mux_av_st_dout_startofpacket),                                                                                                                     //            .startofpacket
		.av_st_dout_endofpacket   (output_mux_av_st_dout_endofpacket),                                                                                                                       //            .endofpacket
		.av_st_dout_data          (output_mux_av_st_dout_data),                                                                                                                              //            .data
		.av_st_dout_ready         (output_mux_av_st_dout_ready)                                                                                                                              //            .ready
	);

	alt_vip_pip_converter_core #(
		.PIXEL_WIDTH            (16),
		.PIXELS_IN_PARALLEL_IN  (1),
		.PIXELS_IN_PARALLEL_OUT (1),
		.PIPELINE_READY         (1),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8),
		.INPUT_FIFO_DEPTH       (0),
		.OUTPUT_FIFO_DEPTH      (16)
	) dil_algo_pip_convertor (
		.clock                    (av_st_clock),                                     // main_clock.clk
		.reset                    (av_st_reset),                                     // main_reset.reset
		.av_st_din_valid          (dil_algo_dout_valid),                             //  av_st_din.valid
		.av_st_din_startofpacket  (dil_algo_dout_startofpacket),                     //           .startofpacket
		.av_st_din_endofpacket    (dil_algo_dout_endofpacket),                       //           .endofpacket
		.av_st_din_data           (dil_algo_dout_data),                              //           .data
		.av_st_din_ready          (dil_algo_dout_ready),                             //           .ready
		.av_st_dout_valid         (dil_algo_pip_convertor_av_st_dout_valid),         // av_st_dout.valid
		.av_st_dout_startofpacket (dil_algo_pip_convertor_av_st_dout_startofpacket), //           .startofpacket
		.av_st_dout_endofpacket   (dil_algo_pip_convertor_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_dout_data          (dil_algo_pip_convertor_av_st_dout_data),          //           .data
		.av_st_dout_ready         (dil_algo_pip_convertor_av_st_dout_ready)          //           .ready
	);

	assign video_in_duplicator_av_st_dout_0_valid = { video_in_duplicator_av_st_dout_valid[0] };

	assign video_in_duplicator_av_st_dout_0_data = { video_in_duplicator_av_st_dout_data[47:0] };

	assign video_in_duplicator_av_st_dout_0_startofpacket = { video_in_duplicator_av_st_dout_startofpacket[0] };

	assign video_in_duplicator_av_st_dout_0_endofpacket = { video_in_duplicator_av_st_dout_endofpacket[0] };

	assign video_in_duplicator_av_st_dout_1_valid = { video_in_duplicator_av_st_dout_valid[1] };

	assign video_in_duplicator_av_st_dout_1_data = { video_in_duplicator_av_st_dout_data[95:48] };

	assign video_in_duplicator_av_st_dout_1_ready = { output_mux_av_st_din_ready[0] };

	assign video_in_duplicator_av_st_dout_1_startofpacket = { video_in_duplicator_av_st_dout_startofpacket[1] };

	assign video_in_duplicator_av_st_dout_1_endofpacket = { video_in_duplicator_av_st_dout_endofpacket[1] };

	assign edi_line_buffer_av_st_dout_0_valid = { edi_line_buffer_av_st_dout_valid[0] };

	assign edi_line_buffer_av_st_dout_0_data = { edi_line_buffer_av_st_dout_data[63:0] };

	assign edi_line_buffer_av_st_dout_0_startofpacket = { edi_line_buffer_av_st_dout_startofpacket[0] };

	assign edi_line_buffer_av_st_dout_0_endofpacket = { edi_line_buffer_av_st_dout_endofpacket[0] };

	assign edi_line_buffer_av_st_dout_1_valid = { edi_line_buffer_av_st_dout_valid[1] };

	assign edi_line_buffer_av_st_dout_1_data = { edi_line_buffer_av_st_dout_data[111:64] };

	assign edi_line_buffer_av_st_dout_1_startofpacket = { edi_line_buffer_av_st_dout_startofpacket[1] };

	assign edi_line_buffer_av_st_dout_1_endofpacket = { edi_line_buffer_av_st_dout_endofpacket[1] };

	assign edi_line_buffer_pip_convertor_av_st_dout_ready = { output_mux_av_st_din_ready[1] };

	assign dil_algo_pip_convertor_av_st_dout_ready = { output_mux_av_st_din_ready[2] };

endmodule
