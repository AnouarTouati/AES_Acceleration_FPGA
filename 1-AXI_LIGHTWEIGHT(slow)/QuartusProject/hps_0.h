#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x0
#define ILC_SPAN 256
#define ILC_END 0xff

/*
 * Macros for device 'hps_key_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_KEY_3_'.
 * The prefix is the slave descriptor.
 */
#define HPS_KEY_3_COMPONENT_TYPE altera_avalon_pio
#define HPS_KEY_3_COMPONENT_NAME hps_key_3
#define HPS_KEY_3_BASE 0x100
#define HPS_KEY_3_SPAN 16
#define HPS_KEY_3_END 0x10f
#define HPS_KEY_3_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_KEY_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_KEY_3_CAPTURE 0
#define HPS_KEY_3_DATA_WIDTH 32
#define HPS_KEY_3_DO_TEST_BENCH_WIRING 0
#define HPS_KEY_3_DRIVEN_SIM_VALUE 0
#define HPS_KEY_3_EDGE_TYPE NONE
#define HPS_KEY_3_FREQ 50000000
#define HPS_KEY_3_HAS_IN 0
#define HPS_KEY_3_HAS_OUT 1
#define HPS_KEY_3_HAS_TRI 0
#define HPS_KEY_3_IRQ_TYPE NONE
#define HPS_KEY_3_RESET_VALUE 0

/*
 * Macros for device 'hps_key_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_KEY_2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_KEY_2_COMPONENT_TYPE altera_avalon_pio
#define HPS_KEY_2_COMPONENT_NAME hps_key_2
#define HPS_KEY_2_BASE 0x110
#define HPS_KEY_2_SPAN 16
#define HPS_KEY_2_END 0x11f
#define HPS_KEY_2_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_KEY_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_KEY_2_CAPTURE 0
#define HPS_KEY_2_DATA_WIDTH 32
#define HPS_KEY_2_DO_TEST_BENCH_WIRING 0
#define HPS_KEY_2_DRIVEN_SIM_VALUE 0
#define HPS_KEY_2_EDGE_TYPE NONE
#define HPS_KEY_2_FREQ 50000000
#define HPS_KEY_2_HAS_IN 0
#define HPS_KEY_2_HAS_OUT 1
#define HPS_KEY_2_HAS_TRI 0
#define HPS_KEY_2_IRQ_TYPE NONE
#define HPS_KEY_2_RESET_VALUE 0

/*
 * Macros for device 'hps_key_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_KEY_1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_KEY_1_COMPONENT_TYPE altera_avalon_pio
#define HPS_KEY_1_COMPONENT_NAME hps_key_1
#define HPS_KEY_1_BASE 0x120
#define HPS_KEY_1_SPAN 16
#define HPS_KEY_1_END 0x12f
#define HPS_KEY_1_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_KEY_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_KEY_1_CAPTURE 0
#define HPS_KEY_1_DATA_WIDTH 32
#define HPS_KEY_1_DO_TEST_BENCH_WIRING 0
#define HPS_KEY_1_DRIVEN_SIM_VALUE 0
#define HPS_KEY_1_EDGE_TYPE NONE
#define HPS_KEY_1_FREQ 50000000
#define HPS_KEY_1_HAS_IN 0
#define HPS_KEY_1_HAS_OUT 1
#define HPS_KEY_1_HAS_TRI 0
#define HPS_KEY_1_IRQ_TYPE NONE
#define HPS_KEY_1_RESET_VALUE 0

/*
 * Macros for device 'hps_key_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_KEY_0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_KEY_0_COMPONENT_TYPE altera_avalon_pio
#define HPS_KEY_0_COMPONENT_NAME hps_key_0
#define HPS_KEY_0_BASE 0x130
#define HPS_KEY_0_SPAN 16
#define HPS_KEY_0_END 0x13f
#define HPS_KEY_0_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_KEY_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_KEY_0_CAPTURE 0
#define HPS_KEY_0_DATA_WIDTH 32
#define HPS_KEY_0_DO_TEST_BENCH_WIRING 0
#define HPS_KEY_0_DRIVEN_SIM_VALUE 0
#define HPS_KEY_0_EDGE_TYPE NONE
#define HPS_KEY_0_FREQ 50000000
#define HPS_KEY_0_HAS_IN 0
#define HPS_KEY_0_HAS_OUT 1
#define HPS_KEY_0_HAS_TRI 0
#define HPS_KEY_0_IRQ_TYPE NONE
#define HPS_KEY_0_RESET_VALUE 0

/*
 * Macros for device 'fpga_data_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_DATA_3_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_DATA_3_COMPONENT_TYPE altera_avalon_pio
#define FPGA_DATA_3_COMPONENT_NAME fpga_data_3
#define FPGA_DATA_3_BASE 0x140
#define FPGA_DATA_3_SPAN 16
#define FPGA_DATA_3_END 0x14f
#define FPGA_DATA_3_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_DATA_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_DATA_3_CAPTURE 0
#define FPGA_DATA_3_DATA_WIDTH 32
#define FPGA_DATA_3_DO_TEST_BENCH_WIRING 0
#define FPGA_DATA_3_DRIVEN_SIM_VALUE 0
#define FPGA_DATA_3_EDGE_TYPE NONE
#define FPGA_DATA_3_FREQ 50000000
#define FPGA_DATA_3_HAS_IN 1
#define FPGA_DATA_3_HAS_OUT 0
#define FPGA_DATA_3_HAS_TRI 0
#define FPGA_DATA_3_IRQ_TYPE NONE
#define FPGA_DATA_3_RESET_VALUE 0

/*
 * Macros for device 'fpga_data_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_DATA_2_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_DATA_2_COMPONENT_TYPE altera_avalon_pio
#define FPGA_DATA_2_COMPONENT_NAME fpga_data_2
#define FPGA_DATA_2_BASE 0x150
#define FPGA_DATA_2_SPAN 16
#define FPGA_DATA_2_END 0x15f
#define FPGA_DATA_2_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_DATA_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_DATA_2_CAPTURE 0
#define FPGA_DATA_2_DATA_WIDTH 32
#define FPGA_DATA_2_DO_TEST_BENCH_WIRING 0
#define FPGA_DATA_2_DRIVEN_SIM_VALUE 0
#define FPGA_DATA_2_EDGE_TYPE NONE
#define FPGA_DATA_2_FREQ 50000000
#define FPGA_DATA_2_HAS_IN 1
#define FPGA_DATA_2_HAS_OUT 0
#define FPGA_DATA_2_HAS_TRI 0
#define FPGA_DATA_2_IRQ_TYPE NONE
#define FPGA_DATA_2_RESET_VALUE 0

/*
 * Macros for device 'fpga_data_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_DATA_1_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_DATA_1_COMPONENT_TYPE altera_avalon_pio
#define FPGA_DATA_1_COMPONENT_NAME fpga_data_1
#define FPGA_DATA_1_BASE 0x160
#define FPGA_DATA_1_SPAN 16
#define FPGA_DATA_1_END 0x16f
#define FPGA_DATA_1_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_DATA_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_DATA_1_CAPTURE 0
#define FPGA_DATA_1_DATA_WIDTH 32
#define FPGA_DATA_1_DO_TEST_BENCH_WIRING 0
#define FPGA_DATA_1_DRIVEN_SIM_VALUE 0
#define FPGA_DATA_1_EDGE_TYPE NONE
#define FPGA_DATA_1_FREQ 50000000
#define FPGA_DATA_1_HAS_IN 1
#define FPGA_DATA_1_HAS_OUT 0
#define FPGA_DATA_1_HAS_TRI 0
#define FPGA_DATA_1_IRQ_TYPE NONE
#define FPGA_DATA_1_RESET_VALUE 0

/*
 * Macros for device 'fpga_data_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_DATA_0_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_DATA_0_COMPONENT_TYPE altera_avalon_pio
#define FPGA_DATA_0_COMPONENT_NAME fpga_data_0
#define FPGA_DATA_0_BASE 0x170
#define FPGA_DATA_0_SPAN 16
#define FPGA_DATA_0_END 0x17f
#define FPGA_DATA_0_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_DATA_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_DATA_0_CAPTURE 0
#define FPGA_DATA_0_DATA_WIDTH 32
#define FPGA_DATA_0_DO_TEST_BENCH_WIRING 0
#define FPGA_DATA_0_DRIVEN_SIM_VALUE 0
#define FPGA_DATA_0_EDGE_TYPE NONE
#define FPGA_DATA_0_FREQ 50000000
#define FPGA_DATA_0_HAS_IN 1
#define FPGA_DATA_0_HAS_OUT 0
#define FPGA_DATA_0_HAS_TRI 0
#define FPGA_DATA_0_IRQ_TYPE NONE
#define FPGA_DATA_0_RESET_VALUE 0

/*
 * Macros for device 'fpga_control', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_CONTROL_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_CONTROL_COMPONENT_TYPE altera_avalon_pio
#define FPGA_CONTROL_COMPONENT_NAME fpga_control
#define FPGA_CONTROL_BASE 0x180
#define FPGA_CONTROL_SPAN 16
#define FPGA_CONTROL_END 0x18f
#define FPGA_CONTROL_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_CONTROL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_CONTROL_CAPTURE 0
#define FPGA_CONTROL_DATA_WIDTH 1
#define FPGA_CONTROL_DO_TEST_BENCH_WIRING 0
#define FPGA_CONTROL_DRIVEN_SIM_VALUE 0
#define FPGA_CONTROL_EDGE_TYPE NONE
#define FPGA_CONTROL_FREQ 50000000
#define FPGA_CONTROL_HAS_IN 1
#define FPGA_CONTROL_HAS_OUT 0
#define FPGA_CONTROL_HAS_TRI 0
#define FPGA_CONTROL_IRQ_TYPE NONE
#define FPGA_CONTROL_RESET_VALUE 0

/*
 * Macros for device 'hps_data_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_DATA_3_'.
 * The prefix is the slave descriptor.
 */
#define HPS_DATA_3_COMPONENT_TYPE altera_avalon_pio
#define HPS_DATA_3_COMPONENT_NAME hps_data_3
#define HPS_DATA_3_BASE 0x190
#define HPS_DATA_3_SPAN 16
#define HPS_DATA_3_END 0x19f
#define HPS_DATA_3_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_DATA_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_DATA_3_CAPTURE 0
#define HPS_DATA_3_DATA_WIDTH 32
#define HPS_DATA_3_DO_TEST_BENCH_WIRING 0
#define HPS_DATA_3_DRIVEN_SIM_VALUE 0
#define HPS_DATA_3_EDGE_TYPE NONE
#define HPS_DATA_3_FREQ 50000000
#define HPS_DATA_3_HAS_IN 0
#define HPS_DATA_3_HAS_OUT 1
#define HPS_DATA_3_HAS_TRI 0
#define HPS_DATA_3_IRQ_TYPE NONE
#define HPS_DATA_3_RESET_VALUE 0

/*
 * Macros for device 'hps_data_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_DATA_2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_DATA_2_COMPONENT_TYPE altera_avalon_pio
#define HPS_DATA_2_COMPONENT_NAME hps_data_2
#define HPS_DATA_2_BASE 0x1a0
#define HPS_DATA_2_SPAN 16
#define HPS_DATA_2_END 0x1af
#define HPS_DATA_2_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_DATA_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_DATA_2_CAPTURE 0
#define HPS_DATA_2_DATA_WIDTH 32
#define HPS_DATA_2_DO_TEST_BENCH_WIRING 0
#define HPS_DATA_2_DRIVEN_SIM_VALUE 0
#define HPS_DATA_2_EDGE_TYPE NONE
#define HPS_DATA_2_FREQ 50000000
#define HPS_DATA_2_HAS_IN 0
#define HPS_DATA_2_HAS_OUT 1
#define HPS_DATA_2_HAS_TRI 0
#define HPS_DATA_2_IRQ_TYPE NONE
#define HPS_DATA_2_RESET_VALUE 0

/*
 * Macros for device 'hps_data_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_DATA_1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_DATA_1_COMPONENT_TYPE altera_avalon_pio
#define HPS_DATA_1_COMPONENT_NAME hps_data_1
#define HPS_DATA_1_BASE 0x1b0
#define HPS_DATA_1_SPAN 16
#define HPS_DATA_1_END 0x1bf
#define HPS_DATA_1_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_DATA_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_DATA_1_CAPTURE 0
#define HPS_DATA_1_DATA_WIDTH 32
#define HPS_DATA_1_DO_TEST_BENCH_WIRING 0
#define HPS_DATA_1_DRIVEN_SIM_VALUE 0
#define HPS_DATA_1_EDGE_TYPE NONE
#define HPS_DATA_1_FREQ 50000000
#define HPS_DATA_1_HAS_IN 0
#define HPS_DATA_1_HAS_OUT 1
#define HPS_DATA_1_HAS_TRI 0
#define HPS_DATA_1_IRQ_TYPE NONE
#define HPS_DATA_1_RESET_VALUE 0

/*
 * Macros for device 'hps_data_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_DATA_0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_DATA_0_COMPONENT_TYPE altera_avalon_pio
#define HPS_DATA_0_COMPONENT_NAME hps_data_0
#define HPS_DATA_0_BASE 0x1c0
#define HPS_DATA_0_SPAN 16
#define HPS_DATA_0_END 0x1cf
#define HPS_DATA_0_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_DATA_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_DATA_0_CAPTURE 0
#define HPS_DATA_0_DATA_WIDTH 32
#define HPS_DATA_0_DO_TEST_BENCH_WIRING 0
#define HPS_DATA_0_DRIVEN_SIM_VALUE 0
#define HPS_DATA_0_EDGE_TYPE NONE
#define HPS_DATA_0_FREQ 50000000
#define HPS_DATA_0_HAS_IN 0
#define HPS_DATA_0_HAS_OUT 1
#define HPS_DATA_0_HAS_TRI 0
#define HPS_DATA_0_IRQ_TYPE NONE
#define HPS_DATA_0_RESET_VALUE 0

/*
 * Macros for device 'hps_control', class 'altera_avalon_pio'
 * The macros are prefixed with 'HPS_CONTROL_'.
 * The prefix is the slave descriptor.
 */
#define HPS_CONTROL_COMPONENT_TYPE altera_avalon_pio
#define HPS_CONTROL_COMPONENT_NAME hps_control
#define HPS_CONTROL_BASE 0x1d0
#define HPS_CONTROL_SPAN 16
#define HPS_CONTROL_END 0x1df
#define HPS_CONTROL_BIT_CLEARING_EDGE_REGISTER 0
#define HPS_CONTROL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HPS_CONTROL_CAPTURE 0
#define HPS_CONTROL_DATA_WIDTH 8
#define HPS_CONTROL_DO_TEST_BENCH_WIRING 0
#define HPS_CONTROL_DRIVEN_SIM_VALUE 0
#define HPS_CONTROL_EDGE_TYPE NONE
#define HPS_CONTROL_FREQ 50000000
#define HPS_CONTROL_HAS_IN 0
#define HPS_CONTROL_HAS_OUT 1
#define HPS_CONTROL_HAS_TRI 0
#define HPS_CONTROL_IRQ_TYPE NONE
#define HPS_CONTROL_RESET_VALUE 0

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x1e0
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x1ef
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 10
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x1f0
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x1ff
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 10
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x200
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x20f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x210
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x217
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1617725911

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
